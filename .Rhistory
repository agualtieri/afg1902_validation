library(openxlsx)
### AFG1902c - PDM Nationwide
data <- read.xlsx("./Copy of Nationwide PDM Round 1_dataset_sv_av.xlsx", sheet = "dataset")
library(cleaninginspectoR)
library(tidyverse)
library(readxl)
library(openxlsx)
issues <- inspect_all(data)
View(issues)
library(cleaninginspectoR)
library(tidyverse)
library(readxl)
library(openxlsx)
library(impactsuite)
### AFG1902c - PDM Nationwide
data <- read.xlsx("./input/AFG_ERM10_HEAT_TOOL_052020_Cleaned_data.xlsx")
issues <- inspect_all(data)
library(impactsuite)
?`impactsuite-package`
library(impactsuite)
issues <- inspect_all(data)
devtools::install_github("impact-initiative/cleaninginspectoR")
devtools::install_github("impact-initiatives/cleaninginspectoR")
library(cleaninginspectoR)
issues <- inspect_all(data)
View(issues)
library(cleaninginspectoR)
library(tidyverse)
library(readxl)
library(openxlsx)
### AFG1902c - PDM Nationwide
data <- read.xlsx("./input/AFG_ERM10_HEAT_TOOL_052020_HQ.xlsx")
log <- read.xlsx("./input/AFG_ERM10_HEAT_TOOL_052020_Cleaning_log.xlsx")
### AFG1902c - PDM Nationwide
data <- read.xlsx("./input/AFG_ERM10_HEAT_TOOL_052020_HQ.xlsx")
log <- read.xlsx("./input/AFG_ERM10_HEAT_TOOL_052020_Cleaning_log.xlsx")
View(log)
View(data)
### AFG1902c - PDM Nationwide
data <- read.xlsx("./input/AFG_ERM10_HEAT_TOOL_052020_Cleaned_data_HQ.xlsx")
log <- read.xlsx("./input/AFG_ERM10_HEAT_TOOL_052020_Cleaning_log.xlsx")
issues <- inspect_all(data)
check <- anti_join(log, data, "uuid")
View(data)
data <- read.xlsx("./input/AFG_ERM10_HEAT_TOOL_052020_Cleaned_data_HQ.xlsx")
log <- read.xlsx("./input/AFG_ERM10_HEAT_TOOL_052020_Cleaning_log.xlsx")
issues <- inspect_all(data)
check <- anti_join(log, data, "uuid")
View(issues)
library(cleaninginspectoR)
library(tidyverse)
library(readxl)
library(openxlsx)
### AFG1902c - PDM Nationwide
data <- read.csv("./input/REACH_AFG_ERM11_HEAT_Clean data.csv", stringsAsFactors = FALSE)
log <- read.xlsx("./input/REACH_AFG_ERM11_HEAT_Cleaning log.xlsx")
tool <- read.xlsx("./input/AFG_ERM11_HEAT.xlsx")
raw <- read.xlsx("./input/REACH_AFG_ERM11_HEAT_Raw data.xlsx")
# sources
source("./R/check_log.R")
source("./R/data_falsification.R")
# inspect data
issues <- inspect_all(data)
View(issues)
# inspect data
issues <- inspect_all(data) %>% filter(!is.na(index))
View(issues)
View(data)
View(log)
View(data)
names(data)[names(data) == "ï..start"] <- "start"
names(data)[names(data) == "uuid"] <- "uuid"
View(log)
write.xlsx(issues, paste0("./output/outliers_",lubridate::today(),".xlsx"))
# check log
log.c <- check_log(data, log)
# check log
log <- log %>% filter(question.name %>% names(data))
View(log)
# check log
log <- log %>% filter(question.name %in% names(data))
log.c <- check_log(data, log)
log <- log %>% filter(uuid %in% data$uuid)
View(log)
names(data)[names(data) == "X_uuid"] <- "uuid"
log <- read.xlsx("./input/REACH_AFG_ERM11_HEAT_Cleaning log.xlsx")
# check log
log <- log %>% filter(question.name %in% names(data))
log <- log %>% filter(uuid %in% data$uuid)
log.c <- check_log(data, log)
View(log.c)
# check time
time.c <- check_time(data, "10", "60")
source("./R/check_time.R")
# check time
time.c <- check_time(data, "10", "60")
View(data)
View(check_time)
# check time
time.c <- check_time(data, 10, 60)
# similar survyes
similar.surveys <- calculateDifferences(data, tool)
library(cluster)
# similar survyes
similar.surveys <- calculateDifferences(data, tool)
# similar survyes
similar.surveys <- calculateDifferences(data, tool) %>% filter(number.different.columns < 5)
# similar survyes
similar.surveys <- calculateDifferences(data, tool)
View(similar.surveys)
# similar survyes
similar.surveys <- calculateDifferences(data, tool) %>% filter(number.different.columns < 5)
write.xlsx(similar.surveys, paste0("./output/similar surveys_",lubridate::today(),".xlsx"))
# Validation
rm(list = ls())
library(cleaninginspectoR)
library(tidyverse)
library(readxl)
library(openxlsx)
library(cluster)
# sources
source("./R/check_log.R")
source("./R/check_time.R")
source("./R/data_falsification.R")
# inputs
data <- read.csv("./input/REACH_AFG_SIDA_HEAT_Clean data.csv", stringsAsFactors = FALSE)
View(data)
names(data)[names(data) == "ï..start"] <- "start"
names(data)[names(data) == "X_uuid"] <- "uuid"
log <- read.xlsx("./input/REACH_AFG_SIDA_HEAT_Cleaning log.xlsx")
tool <- read.xlsx("./input/AFG_SIDA_HEAT.xlsx")
raw <- read.xlsx("./input/REACH_AFG_SIDA_HEAT_Raw data.xlsx")
# inspect data
issues <- inspect_all(data) %>% filter(!is.na(index))
View(issues)
View(issues)
# inspect data
issues <- inspect_all(data) %>% filter(!is.na(index)) %>% left_join(, select(data, "uuid", "index"), "index")
# inspect data
issues <- inspect_all(data) %>% filter(!is.na(index)) %>% left_join(., select(data, "uuid", "index"), "index")
View(issues)
write.xlsx(issues, paste0("./output/outliers_",lubridate::today(),".xlsx"))
View(issues)
# check log
log <- log %>% filter(question.name %in% names(data))
log <- log %>% filter(uuid %in% data$uuid)
log.c <- check_log(data, log)
View(log.c)
write.xlsx(log.c, paste0("./output/log check_",lubridate::today(),".xlsx"))
# similar survyes
similar.surveys <- calculateDifferences(data, tool) %>% filter(number.different.columns < 5)
write.xlsx(similar.surveys, paste0("./output/similar surveys_",lubridate::today(),".xlsx"))
View(data)
# hh members
hh.c <- data %>% select("uuid", "hh_memb", "hh_count") %>% mutate(check = ifelse(hh_memb = hh_count, 1, 0))
# hh members
hh.c <- data %>% select("uuid", "hh_mem", "hh_count") %>% mutate(check = ifelse(hh_memb = hh_count, 1, 0))
# hh members
hh.c <- data %>% select("uuid", "hh_mem", "hh_count") %>% mutate(check = ifelse(hh_memb == hh_count, 1, 0))
# hh members
hh.c <- data %>% select("uuid", "hh_mem", "hh_count") %>% rowwise() %>% mutate(check = ifelse(hh_memb == hh_count, 1, 0))
# hh members
hh.c <- data %>% select("uuid", "hh_mem", "hh_count") %>% rowwise() %>% mutate(check = ifelse(hh_memb = hh_count, 1, 0))
# hh members
hh.c <- data %>% select("uuid", "hh_mem", "hh_count") %>% rowwise() %>% mutate(check = ifelse(hh_memb = hh_count, "Ok", "Error"))
# hh members
hh.c <- data %>% select("uuid", "hh_mem", "hh_count") %>% rowwise() %>% mutate(check = ifelse((hh_memb = hh_count), "Ok", "Error"))
View(hh.c)
# hh members
hh.c <- data %>% select("uuid", "hh_mem", "hh_count") %>% mutate(check = ifelse((hh_memb = hh_count), "Ok", "Error")) %>% filter(check == "Error")
View(hh.c)
table(data$lcs_severity)
prop.table(table(data$lcs_severity))
prop.table(table(data$fcs_status))
?case_when
fcs.c <- data %>% select("uuid", "fcs_score", "fcs_status") %>% mutate(check = case_when(
fcs_score > 42 ~ "Acceptable",
fcs_score >= 28.5 & fcs_score < 42 ~ "Borderline",
fcs_score <= 28 ~ "Poor",
TRUE ~ as.character(fcs_score)))
View(fcs.c)
# Validation
rm(list = ls())
library(cleaninginspectoR)
library(tidyverse)
library(readxl)
library(openxlsx)
library(cluster)
# sources
source("./R/check_log.R")
source("./R/check_time.R")
source("./R/data_falsification.R")
# inputs
data <- read.csv("./input/AFG_ERM11_HEAT_July2021_Cleaned_Data.xlsx", stringsAsFactors = FALSE)
# inputs
data <- read.xlsx("./input/AFG_ERM11_HEAT_July2021_Cleaned_Data.xlsx" detectDates = TRUE)
# inputs
data <- read.xlsx("./input/AFG_ERM11_HEAT_July2021_Cleaned_Data.xlsx", detectDates = TRUE)
View(data)
#names(data)[names(data) == "ï..start"] <- "start"
names(data)[names(data) == "_uuid"] <- "uuid"
log <- read.xlsx("./input/AFG_ERM11_HEAT_July2021_Cleaning_log.xlsx")
tool <- read.xlsx("./input/AFG_ERM11_HEAT_July2021_Tool.xlsx")
dat$`_index`
data$`_index`
data$`_index` <- NULL
data <- data %>% mutate(index = 1:nrow(data))
# inspect data
issues <- inspect_all(data) %>% filter(!is.na(index)) %>% left_join(., select(data, "uuid", "index"), "index")
View(issues)
write.xlsx(issues, paste0("./output/outliers_",lubridate::today(),".xlsx"))
# check log
log <- log %>% filter(question.name %in% names(data))
log <- read.xlsx("./input/AFG_ERM11_HEAT_July2021_Cleaning_log.xlsx")
`%nin%` <- Negate(`%in%`)
# check log
question.not.in.data <- log %>% filter(question.name %nin% names(data))
View(question.not.in.data)
uuid.not.in.data <- log %>% filter(uuid %nin% data$uuid)
View(uuid.not.in.data)
write.xlsx(uuid.not.in.data, paste0("./output/uuid not in data_",lubridate::today(),".xlsx"))
dels <- read.xlsx("./input/AFG_ERM11_HEAT_July2021_Cleaning_log.xlsx", sheet = 2)
log <- log %>% filter(question.name %in% names(data))
log <- log %>% filter(uuid %in% data$uuid)
log.c <- check_log(data, log)
View(log.c)
View(check_log)
log.c <- check_log(data, log) %>% mutate(., check = ifelse(new.value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
write.xlsx(log.c, paste0("./output/log check_",lubridate::today(),".xlsx"))
# similar survyes
similar.surveys <- calculateDifferences(data, tool) %>% filter(number.different.columns < 5)
write.xlsx(similar.surveys, paste0("./output/similar surveys_",lubridate::today(),".xlsx"))
View(dels)
# deletions
dels$`_uuid` %in% data$uuid
# hh members
hh.c <- data %>% select("uuid", "hh_mem", "hh_count") %>% mutate(check = ifelse((hh_memb = hh_count), "Ok", "Error")) %>% filter(check == "Error")
# tables
prop.table(table(data$lcs_severity))
prop.table(table(data$fcs_status))
fcs.c <- data %>% select("uuid", "fcs_score", "fcs_status") %>% mutate(check = case_when(
fcs_score > 42 ~ "Acceptable",
fcs_score >= 28.5 & fcs_score < 42 ~ "Borderline",
fcs_score <= 28 ~ "Poor",
TRUE ~ as.character(fcs_score)))
View(fcs.c)
fcs.c <- data %>% select("uuid", "fcs_score", "fcs_status") %>% mutate(check = case_when(
fcs_score > 42 ~ "Acceptable",
fcs_score >= 28.5 & fcs_score < 42 ~ "Borderline",
fcs_score <= 28 ~ "Poor",
TRUE ~ as.character(fcs_score))) %>%
mutate(check2 = ifelse(fcs_status = check, 1, 0))
fcs.c <- data %>% select("uuid", "fcs_score", "fcs_status") %>% mutate(check = case_when(
fcs_score > 42 ~ "Acceptable",
fcs_score >= 28.5 & fcs_score < 42 ~ "Borderline",
fcs_score <= 28 ~ "Poor",
TRUE ~ as.character(fcs_score))) %>%
mutate(check2 = ifelse(fcs_status == check, 1, 0))
fcs.c <- data %>% select("uuid", "fcs_score", "fcs_status") %>% mutate(check = case_when(
fcs_score > 42 ~ "Acceptable",
fcs_score >= 28.5 & fcs_score < 42 ~ "Borderline",
fcs_score <= 28 ~ "Poor",
TRUE ~ as.character(fcs_score))) %>%
mutate(check2 = ifelse(fcs_status == check, 1, 0)) %>%
filter(check2 == 0)
# disability
prop.table(table(data$hhh_disability))
# Check Analysis
rm(list = ls())
library(tidyverse)
library(openxlsx)
library(waldo)
data_cleaned <- read.xlsx("./input/AFG_ERM11_HEAT_July2021_Cleaned_Data.xlsx")
data_analysis <- read.csv("./input/anaysis/AFG_ERM11_HEAT_July2021_Cleaned_Data.csv", stringsAsFactors = FALSE)
all.equal(data_cleaned, data_analysis)
?`waldo-package`
waldo::compare(data_cleaned, data_analysis, x_arg = "cleaned", y_arg = "analysis")
?compare
library(arsenal)
?arsenal
comparedf(data_cleaned, data_analysis)
View(data_analysis)
names(data_analysis)[names(data_analysis) == "ï..start"] <- "start"
View(data_cleaned)
View(data_cleaned)
names(data_analysis)[names(data_analysis) == "X_uuid"] <- "_uuid"
names(data_analysis)[names(data_analysis) == "X_index"] <- "_index"
all.equal(data_cleaned, data_analysis)
comparedf(data_cleaned, data_analysis)
comparedf(data_cleaned, data_analysis, by = "_uuid")
comparedf(data_cleaned, data_analysis, by = "_uuid") %>% diff()
summary(comparedf(data_cleaned, data_analysis, by = "_uuid"))
rm(list = ls())
library(cleaninginspectoR)
library(tidyverse)
library(readxl)
library(openxlsx)
library(cluster)
# sources
source("./R/check_log.R")
source("./R/check_time.R")
source("./R/data_falsification.R")
`%nin%` <- Negate(`%in%`)
# inputs
data <- read.xlsx("./input/AFG_ERM11_HEAT_July2021_Cleaned_Data.xlsx", detectDates = TRUE)
#names(data)[names(data) == "ï..start"] <- "start"
names(data)[names(data) == "_uuid"] <- "uuid"
data <- data %>% mutate(index = 1:nrow(data))
log <- read.xlsx("./input/AFG_ERM11_HEAT_July2021_Cleaning_log.xlsx", sheet = 1)
dels <- read.xlsx("./input/AFG_ERM11_HEAT_July2021_Cleaning_log.xlsx", sheet = 2)
tool <- read.xlsx("./input/AFG_ERM11_HEAT_July2021_Tool.xlsx")
# check log
question.not.in.data <- log %>% filter(question.name %nin% names(data))
dels$`_uuid`%in% question.not.in.data$uuid
question.not.in.data$uuid %in% dels$`_uuid`
View(dels)
View(question.not.in.data)
question.not.in.data$uuid %in% dels$`_uuid`
question.not.in.data$uuid %in% data$uuid
log <- read.xlsx("./input/AFG_ERM11_HEAT_July2021_Cleaning_log.xlsx", sheet = 1)
log <- log %>% filter(question.name %in% names(data))
log <- log %>% filter(uuid %in% data$uuid)
uuid.not.in.data <- log %>% filter(uuid %nin% data$uuid)
